import java.util.*;

class RepeatedSquaring_FastExponentiation_ModifiedHornerRule {
public static int fastExpo(int a, int p, int n) {
if(p == 0)
return 1;

int t = 0;
if(p % 2 == 0) { // power is even.
t = fastExpo(a, p/2, n);
return ((t * t) % n);
}

t = fastExpo(a, (p-1)/2, n); // p is odd i.e., the exponent is odd.
return ((a * ((t * t) % n)) % n);
}
public static void main(String[] args) {
int a = 0, p = 0, n = 0;

Scanner scanner = new Scanner(System.in);
a = scanner.nextInt();
p = scanner.nextInt();
n = scanner.nextInt();

int result = fastExpo(a, p, n);
System.out.println("Result is: " + result);
}
}
